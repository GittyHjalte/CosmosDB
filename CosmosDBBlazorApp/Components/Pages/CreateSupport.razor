@page "/createsupport"
@using System.ComponentModel.DataAnnotations
@using Share.Models
@inject ILogger<SupportMessage> Logger
@inject CosmosDBBlazorApp.Services.SupportMessageService SupportService

<EditForm Model="Model"
          OnValidSubmit="SubmitAsync"
          FormName="SupportMessageForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name:</label>
        <InputText @bind-Value="Model!.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="Model!.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label>Phone:</label>
        <InputText @bind-Value="Model!.Phone" class="form-control" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <InputTextArea @bind-Value="Model!.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Category:</label>
        <InputText @bind-Value="Model!.Category" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Send</button>
</EditForm>

@if (!string.IsNullOrEmpty(ResponseMessage))
{
    <p>@ResponseMessage</p>
}

@code {
    [SupplyParameterFromForm]
    private SupportMessage? Model { get; set; }

    private string? ResponseMessage;

    protected override void OnInitialized() => Model ??= new();

    private async Task SubmitAsync()
    {
        try
        {
            var success = await SupportService.AddSupportMessageAsync(Model!);

            if (success)
            {
                ResponseMessage = "Sucess";
                Logger.LogInformation("✅ Sucess for {Email}", Model?.Email);
                Model = new(); // resetter
            }
            else
            {
                ResponseMessage = "Failed to save. API error).";
                Logger.LogWarning("API returned fail");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending message");
            ResponseMessage = $"❌ Error: {ex.Message}";
        }
    }
}
