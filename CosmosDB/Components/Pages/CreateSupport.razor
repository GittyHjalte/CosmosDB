@page "/create-support"
@using Core.Models
@inject CosmosDB.Services.SupportService SupportService

<h3>Opret ny support-henvendelse</h3>

<EditForm Model="@supportMessage" OnValidSubmit="@CreateSupportMessage">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Navn</label>
        <InputText @bind-Value="supportMessage.Name" class="form-control" />
        <ValidationMessage For="@(() => supportMessage.Name)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="supportMessage.Email" class="form-control" />
        <ValidationMessage For="@(() => supportMessage.Email)" />
    </div>

    <div class="form-group">
        <label>Telefon</label>
        <InputText @bind-Value="supportMessage.Phone" class="form-control" />
        <ValidationMessage For="@(() => supportMessage.Phone)" />
    </div>

    <div class="form-group">
        <label>Beskrivelse</label>
        <InputTextArea @bind-Value="supportMessage.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Kategori</label>
        <InputText @bind-Value="supportMessage.Category" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Opret henvendelse</button>
</EditForm>

@if (statusMessage != null)
{
    <p>@statusMessage</p>
}

@code {
    private SupportMessage supportMessage = new();
    private string? statusMessage;

    private async Task CreateSupportMessage()
    {
        supportMessage.Id = Guid.NewGuid().ToString(); // Cosmos kræver streng-id
        supportMessage.Date = DateTime.UtcNow;

        try
        {
            await SupportService.AddSupportMessage(supportMessage);
            statusMessage = "✅ Henvendelsen blev gemt i databasen!";
            supportMessage = new(); // Nulstil formularen
        }
        catch (Exception ex)
        {
            statusMessage = $"❌ Fejl: {ex.Message}";
        }
    }
}